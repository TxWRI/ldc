[{"path":"https://txwri.github.io/ldc/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2021 ldc authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://txwri.github.io/ldc/articles/Introduction.html","id":"input-data","dir":"Articles","previous_headings":"","what":"Input Data","title":"Introduction to ldc","text":"ldc requires dataframe least two columns, discharge (\\(Q\\)) measured pollutant concentrations (\\(C\\)). assumed, \\(Q\\) mean daily discharge, units can used (cfs, cms, etc.) \\(C\\) can measured pollutant concentration associated value \\(Q\\) row. package includes dataset, tres_palacios, demonstrates formatted. ldc also utilizes units package handle unit conversions. Therefore, \\(Q\\) \\(C\\) need formatted units objects using ldc functions. example , need create new unit, “cfu”, Indicator_Bacteria variable change Flow Indicator_Bacteria unit objects. Now dataframe formatted use ldc functions. can see unit objects include appropriate units printed.","code":"## load required packages library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  ## load example data df <- as_tibble(tres_palacios) %>%   ## filter this to the last 6 years of data   filter(Date >= as.Date(\"2014-01-01\"))  ## show the data filtered to paired Q and C observations df %>% filter(!is.na(Indicator_Bacteria)) #> # A tibble: 27 × 4 #>    site_no  Date        Flow Indicator_Bacteria #>    <chr>    <date>     <dbl>              <dbl> #>  1 08162600 2014-03-05 59.3               16000 #>  2 08162600 2014-06-17 13.6                  52 #>  3 08162600 2014-10-02 20.4                 250 #>  4 08162600 2014-12-04 66.5                2400 #>  5 08162600 2015-03-17 25.9                 180 #>  6 08162600 2016-02-10  9.46                 32 #>  7 08162600 2016-04-06  9.46                 31 #>  8 08162600 2016-06-16 28.3                  75 #>  9 08162600 2016-09-28 25.4                  31 #> 10 08162600 2016-12-14 15.9                 110 #> # … with 17 more rows ## load required packages library(units) #> udunits database from /usr/share/xml/udunits/udunits2.xml   ## make the cfu unit install_unit(\"cfu\")  ## change Q and C to unit objects with appropriate units df <- df %>%   mutate(Flow = set_units(Flow, \"ft^3/s\"),          Indicator_Bacteria = set_units(Indicator_Bacteria, \"cfu/100mL\")) df #> # A tibble: 2,557 × 4 #>    site_no  Date           Flow Indicator_Bacteria #>    <chr>    <date>     [ft^3/s]        [cfu/100mL] #>  1 08162600 2014-01-01     7.82                 NA #>  2 08162600 2014-01-02     7.64                 NA #>  3 08162600 2014-01-03     9.34                 NA #>  4 08162600 2014-01-04     7.42                 NA #>  5 08162600 2014-01-05     7.45                 NA #>  6 08162600 2014-01-06     6.79                 NA #>  7 08162600 2014-01-07     6.59                 NA #>  8 08162600 2014-01-08     7.28                 NA #>  9 08162600 2014-01-09    25.5                  NA #> 10 08162600 2014-01-10    29.4                  NA #> # … with 2,547 more rows"},{"path":"https://txwri.github.io/ldc/articles/Introduction.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"Introduction to ldc","text":"ldc composed three major functions: calc_ldc() takes input dataset matched flow pollutant concentrations generate dataframe exceedance probabilities allowable pollutant loads (LDC), measured pollutant concentrations converted loads, alongside user specified flow duration intervals. summ_ldc() uses output calc_ldc() generate summary dataframe grouped flow duration intervals. draw_ldc() uses output functions generate LDC figure ggplot object. calc_ldc calc_ldc() function first function run. six arguments: .tbl dataframe formatted described . Q variable name .tbl discharge flow. C variable name measured pollutant concentration. allowable_concentration object class units specifying allowable pollutant concentration (water quality standard). must units C. breaks numeric vector (1 -> 0) indicates break points flow duration intervals. length vector 1 number flow duration intervals. example, c(1, 0.9, 0.6, 0.4, 0.1, 0) 6 breaks 5 flow duration intervals. labels vector names flow duration interval. example, c(\"Highest flows\", \"High Flows\", \"Moderate Flows\", \"Dry Conditions\", \"Lowest Flows\"). summ_ldc summ_ldc() function second function run. six arguments: .tbl dataframe, preferably output calc_ldc() formatted exactly like . Q variable name .tbl discharge flow. C variable name .tbl measured pollutant concentration. Exceedance variable name .tbl flow exceedance probabilities. defaults output created calc_ldc() cases can leave alone. groups variable name .tbl flow interval names. defaults output created calc_ldc() cases can leave alone. method string describing method desired summarizing pollutant concentration. can one \"geomean\", \"mean\", \"median\". draw_ldc final function draw_ldc() uses output previous two functions generate plot ggplot object. many arguments function, won’t describe details available using ?draw_ldc. Importantly, since output ggplot object, output can modified using many available ggplot functions.","code":"## set the allowable concentration allowable_concentration <- 126 units(allowable_concentration) <- \"cfu/100mL\"  ## calculate the ldc df_ldc <- calc_ldc(df,                    Q = Flow,                    C = Indicator_Bacteria,                    allowable_concentration = allowable_concentration,                    breaks = c(1, 0.9, 0.6, 0.4, 0.1, 0),                    labels = c(\"Highest flows\", \"High Flows\", \"Moderate Flows\", \"Dry Conditions\", \"Lowest Flows\"))  ## show the result df_ldc %>% filter(!is.na(Indicator_Bacteria)) #> # A tibble: 27 × 9 #>    site_no  Date           Flow Indicator_Bacteria Daily_Flow_Volume  Daily_Load #>    <chr>    <date>     [ft^3/s]        [cfu/100mL]         [100mL/d]     [cfu/d] #>  1 08162600 2016-02-10     9.46                 32        231446047.     7.41e 9 #>  2 08162600 2016-04-06     9.46                 31        231446047.     7.17e 9 #>  3 08162600 2020-08-24    10.7                 130        261783583.     3.40e10 #>  4 08162600 2019-10-15    12.7                 310        310715094.     9.63e10 #>  5 08162600 2014-06-17    13.6                  52        332734274.     1.73e10 #>  6 08162600 2018-07-24    14.3                  20        349860303.     7.00e 9 #>  7 08162600 2020-10-28    14.5                 130        354753454.     4.61e10 #>  8 08162600 2020-05-06    14.7                 110        359646605.     3.96e10 #>  9 08162600 2020-01-15    14.8                  84        362093181.     3.04e10 #> 10 08162600 2016-12-14    15.9                 110        389005512.     4.28e10 #> # … with 17 more rows, and 3 more variables: Allowable_Daily_Load [cfu/d], #> #   P_Exceedance <dbl>, Flow_Category <fct> df_sum <- summ_ldc(df_ldc,                     Q = Flow,                     C = Indicator_Bacteria,                     Exceedance = P_Exceedance,                    groups = Flow_Category,                    method = \"geomean\") df_sum #> # A tibble: 5 × 6 #>   Flow_Category Median_Flow Median_P Geomean_C Median_Daily_Fl… Median_Flow_Load #>   <fct>            [ft^3/s]    <dbl> [cfu/100…        [100mL/d]          [cfu/d] #> 1 Highest flows       514     0.0500     410       12575398304.          5.16e12 #> 2 High Flows           43.9   0.25       284.       1074046664.          3.05e11 #> 3 Moderate Flo…        20.8   0.5         79.2       508887713.          4.03e10 #> 4 Dry Conditio…        14.3   0.75       101.        349860303.          3.54e10 #> 5 Lowest Flows          9     0.950       31.5       220191799.          6.94e 9 library(ggplot2)  p1 <- draw_ldc(df_ldc,                 df_sum,                 y_lab = expression(paste(italic(\"E. coli\"))),                ldc_legend_name = \"LDC at 35cfu/100mL\",                measurement_name = \"Measured Values\",                summary_name = \"Summarized Loads (Geometric Mean)\",                label_nudge_y = log10(1000)) +    scale_y_log10() +   annotation_logticks(sides = \"l\") +   theme_bw() +   theme(legend.title = element_blank(),         legend.direction = \"vertical\",         legend.position = \"bottom\")  p1 #> Warning: Removed 2530 rows containing missing values (geom_point)."},{"path":"https://txwri.github.io/ldc/articles/Introduction.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Introduction to ldc","text":"Cleland, Bruce. 2003. TMDL Development “Bottom ” – Part Iii: Duration Curves Wet-Weather Assessments. America’s Clean Water Foundation. www.researchgate.net/publication/228822472_TMDL_Development_from_the_Bottom_Up-_PART_III_Durations_Curves_and_Wet-Weather_Assessments. Morrison, Matthew , James V Bonta. 2008. “Development Duration-Curve Based Methods Quantifying Variability Change Watershed Hydrology Water Quality.” EPA/600/R-08/065. U.S. Environmental Protection Agency. https://nepis.epa.gov/Exe/ZyPURL.cgi?Dockey=P1000VR4.txt. Vogel, Richard M., Neil M. Fennessey. 1994. “Flow‐Duration Curves. : New Interpretation Confidence Intervals.” Journal Water Resources Planning Management 120 (4): 485–504. https://doi.org/10.1061/(ASCE)0733-9496(1994)120:4(485).","code":""},{"path":"https://txwri.github.io/ldc/articles/exceedance.html","id":"alternative-quantile-estimators","dir":"Articles","previous_headings":"","what":"Alternative Quantile Estimators","title":"Quantile Estimation Procedures","text":"Harrell-Davis distribution-free quantile estimator (estimator = \"hd\") described Harrell Davis (1982), equivalent \\(Q_{p,3}\\) described Vogel Fennessey (1994). math included , can found Vogel Fennessey (1994) Harrell Davis (1982). Vogel Fennessey (1994) note estimator provides smoother estimates quantiles \\(Q_{p,1}\\) small samples. particularly advantageous calculating annualized flow duration curves included calc_annual_ldc() function. calc_annual_ldc() function returns quantiles measured streamflow values, estimation quantiles needed returned directly plotting position methods (estimator = 5:9). Exceedance probabilities can also calculated using continuous sample quantiles types 5 9 documented quantile(). Type 6 default described . Type 5 described Hanzen (1914): \\[ p = P(Q > q_i) =  \\frac{- 0.5}{n} \\] figure shows annual FDC resulting estimator methods:  x-axis log transformed highlight differences highest flow regimes. Methods 5 9 minor differences shape, although estimates close. Harrell-Davis method results notably smoother estimated median confidence interval.","code":"#> udunits database from /usr/share/xml/udunits/udunits2.xml #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union #> Warning: Transformation introduced infinite values in continuous x-axis #> Transformation introduced infinite values in continuous x-axis"},{"path":"https://txwri.github.io/ldc/articles/exceedance.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Quantile Estimation Procedures","text":"Hanzen, Allen. 1914. “Storage Provided Impounding Municipal Water Supply.” Transactions American Society Civil Engineers 77 (1). https://doi.org/10.1061/taceat.0002563. Harrell, Frank E, C E Davis. 1982. “New Distribution-Free Quantile Estimator.” Biometrika 69 (3). Vogel, Richard M., Neil M. Fennessey. 1994. “Flow‐Duration Curves. : New Interpretation Confidence Intervals.” Journal Water Resources Planning Management 120 (4): 485–504. https://doi.org/10.1061/(ASCE)0733-9496(1994)120:4(485).","code":""},{"path":"https://txwri.github.io/ldc/articles/units.html","id":"introduction-to-units","dir":"Articles","previous_headings":"","what":"Introduction to Units","title":"Why Units","text":"ldc relies units package facilitate unit conversions tracking units across variables. handy want transform units fly. suggest briefly reviewing units package documentation become familiar units objects handled. brief example shown : x object type units can used R expressions: units can converted: Units can plotted:  ggforce package required handle plotting units ggplot2:","code":"library(units) #> udunits database from /usr/share/xml/udunits/udunits2.xml ## generate random data x <- rlnorm(n = 100, meanlog = log(100), sdlog = log(10))  ## attach units, cubic feet per second x <- set_units(x, \"ft^3/s\") x #> Units: [ft^3/s] #>   [1] 3.305217e+03 2.237243e+01 6.843526e+01 5.130397e-01 8.465099e+02 #>   [6] 3.261493e+01 4.209772e+01 1.619673e+01 2.472124e+01 8.180078e+02 #>  [11] 5.910870e+03 1.002994e+01 7.187791e+00 5.559155e+02 2.669817e+01 #>  [16] 7.557542e+01 1.738401e+01 2.705508e+01 4.896507e+00 1.303612e+03 #>  [21] 1.439782e+01 3.661344e+01 5.021760e+03 1.647707e+02 2.560844e+03 #>  [26] 7.364910e-01 6.789498e+02 1.184617e+01 7.315961e+01 1.384772e+01 #>  [31] 7.428468e+02 7.576590e+02 1.375925e+02 5.815625e+00 4.023443e+01 #>  [36] 2.602308e+01 3.559056e+00 2.981858e+04 7.992568e+01 5.448878e+00 #>  [41] 5.757906e+02 2.459403e+00 1.312775e+03 6.292475e+00 7.633091e+00 #>  [46] 3.772260e+02 1.311790e+01 4.947215e+02 1.808063e+02 2.243639e+02 #>  [51] 4.623318e+02 1.027519e+02 2.078196e+02 6.443158e+00 3.172421e+02 #>  [56] 1.887825e+00 1.548666e+02 3.073110e+01 1.224608e+00 1.333124e+01 #>  [61] 7.415647e+01 9.282686e+01 9.816047e+02 5.311807e+02 9.999362e+03 #>  [66] 7.673251e+01 1.993032e+04 3.037631e+02 4.225274e-01 8.347452e+01 #>  [71] 6.504620e+02 1.784513e+03 2.930827e+02 2.668672e+03 8.941402e+00 #>  [76] 1.019004e+02 4.301757e+00 1.678122e+02 1.166100e+01 2.072369e+01 #>  [81] 3.715639e+01 1.617803e+02 1.397819e+03 5.458505e+03 3.031891e+02 #>  [86] 2.377440e+01 1.786722e+01 2.393758e+01 1.984455e+01 7.954231e+02 #>  [91] 1.380240e+02 3.489321e+03 4.282422e+02 3.968873e+01 7.352239e+01 #>  [96] 3.573688e+01 5.207961e+01 7.638658e+01 2.172734e+02 1.113797e+01 x * 86400 #> Units: [ft^3/s] #>   [1] 2.855708e+08 1.932978e+06 5.912806e+06 4.432663e+04 7.313846e+07 #>   [6] 2.817930e+06 3.637243e+06 1.399398e+06 2.135916e+06 7.067587e+07 #>  [11] 5.106992e+08 8.665870e+05 6.210251e+05 4.803110e+07 2.306722e+06 #>  [16] 6.529716e+06 1.501978e+06 2.337559e+06 4.230582e+05 1.126321e+08 #>  [21] 1.243972e+06 3.163401e+06 4.338801e+08 1.423619e+07 2.212569e+08 #>  [26] 6.363282e+04 5.866127e+07 1.023509e+06 6.320990e+06 1.196443e+06 #>  [31] 6.418197e+07 6.546174e+07 1.188799e+07 5.024700e+05 3.476255e+06 #>  [36] 2.248394e+06 3.075024e+05 2.576326e+09 6.905579e+06 4.707831e+05 #>  [41] 4.974831e+07 2.124924e+05 1.134238e+08 5.436698e+05 6.594990e+05 #>  [46] 3.259233e+07 1.133386e+06 4.274394e+07 1.562166e+07 1.938504e+07 #>  [51] 3.994547e+07 8.877762e+06 1.795562e+07 5.566888e+05 2.740972e+07 #>  [56] 1.631081e+05 1.338047e+07 2.655167e+06 1.058061e+05 1.151819e+06 #>  [61] 6.407119e+06 8.020241e+06 8.481065e+07 4.589401e+07 8.639449e+08 #>  [66] 6.629689e+06 1.721980e+09 2.624513e+07 3.650637e+04 7.212198e+06 #>  [71] 5.619992e+07 1.541820e+08 2.532235e+07 2.305732e+08 7.725371e+05 #>  [76] 8.804192e+06 3.716718e+05 1.449897e+07 1.007511e+06 1.790527e+06 #>  [81] 3.210312e+06 1.397782e+07 1.207715e+08 4.716148e+08 2.619554e+07 #>  [86] 2.054108e+06 1.543728e+06 2.068207e+06 1.714569e+06 6.872456e+07 #>  [91] 1.192528e+07 3.014773e+08 3.700012e+07 3.429106e+06 6.352335e+06 #>  [96] 3.087667e+06 4.499678e+06 6.599801e+06 1.877242e+07 9.623207e+05 ## convert to cubic feet per day x <- set_units(x, \"ft^3/d\") x #> Units: [ft^3/d] #>   [1] 2.855708e+08 1.932978e+06 5.912806e+06 4.432663e+04 7.313846e+07 #>   [6] 2.817930e+06 3.637243e+06 1.399398e+06 2.135916e+06 7.067587e+07 #>  [11] 5.106992e+08 8.665870e+05 6.210251e+05 4.803110e+07 2.306722e+06 #>  [16] 6.529716e+06 1.501978e+06 2.337559e+06 4.230582e+05 1.126321e+08 #>  [21] 1.243972e+06 3.163401e+06 4.338801e+08 1.423619e+07 2.212569e+08 #>  [26] 6.363282e+04 5.866127e+07 1.023509e+06 6.320990e+06 1.196443e+06 #>  [31] 6.418197e+07 6.546174e+07 1.188799e+07 5.024700e+05 3.476255e+06 #>  [36] 2.248394e+06 3.075024e+05 2.576326e+09 6.905579e+06 4.707831e+05 #>  [41] 4.974831e+07 2.124924e+05 1.134238e+08 5.436698e+05 6.594990e+05 #>  [46] 3.259233e+07 1.133386e+06 4.274394e+07 1.562166e+07 1.938504e+07 #>  [51] 3.994547e+07 8.877762e+06 1.795562e+07 5.566888e+05 2.740972e+07 #>  [56] 1.631081e+05 1.338047e+07 2.655167e+06 1.058061e+05 1.151819e+06 #>  [61] 6.407119e+06 8.020241e+06 8.481065e+07 4.589401e+07 8.639449e+08 #>  [66] 6.629689e+06 1.721980e+09 2.624513e+07 3.650637e+04 7.212198e+06 #>  [71] 5.619992e+07 1.541820e+08 2.532235e+07 2.305732e+08 7.725371e+05 #>  [76] 8.804192e+06 3.716718e+05 1.449897e+07 1.007511e+06 1.790527e+06 #>  [81] 3.210312e+06 1.397782e+07 1.207715e+08 4.716148e+08 2.619554e+07 #>  [86] 2.054108e+06 1.543728e+06 2.068207e+06 1.714569e+06 6.872456e+07 #>  [91] 1.192528e+07 3.014773e+08 3.700012e+07 3.429106e+06 6.352335e+06 #>  [96] 3.087667e+06 4.499678e+06 6.599801e+06 1.877242e+07 9.623207e+05 ## convert to million gallons per day x <- set_units(x, \"1E6gallons/day\") hist(x) library(ggplot2) library(ggforce) #> Registered S3 method overwritten by 'ggforce': #>   method           from  #>   scale_type.units units  ggplot(data.frame(x)) +   geom_histogram(aes(x), binwidth = 100)"},{"path":"https://txwri.github.io/ldc/articles/units.html","id":"units-with-ldc","dir":"Articles","previous_headings":"","what":"Units with ldc","title":"Why Units","text":"Stream loads measured pounds kilograms per day pollutants nutrients sediment. Fecal bacteria loads typically colony forming units (cfu) probable number (MPN) per day. included tres_palacios dataset includes bacteria flow measurements Tres Palacios river. Bacteria measurements need units “cfu/100mL” flow “cubic feet per second.” tibble shows correct units column. want use metric units flow? Now can calculate flow load exceedance probabilities using calc_ldc(). Q C arguments must units attached C must concentration unit (mass counts divided volume). Now percent exceedance daily flow, flow volume, allowable daily loads. daily flow volume daily load volume huge numbers, might make sense convert units.","code":"library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union  ## create a cfu unit. it is a simple count, so we just add it as an arbitrary unit. install_unit(\"cfu\")  ## format the data for use in ldc tres_palacios <- as_tibble(tres_palacios) |>   ## flow must have units, here is is in cfs   mutate(Flow = set_units(Flow, \"ft^3/s\"))|>   ## pollutant concentration must have units   mutate(Indicator_Bacteria = set_units(Indicator_Bacteria, \"cfu/100mL\")) tres_palacios #> # A tibble: 7,671 × 4 #>    site_no  Date           Flow Indicator_Bacteria #>    <chr>    <date>     [ft^3/s]        [cfu/100mL] #>  1 08162600 2000-01-01     0.84                 NA #>  2 08162600 2000-01-02     3                    NA #>  3 08162600 2000-01-03     3.4                  NA #>  4 08162600 2000-01-04     2.6                  NA #>  5 08162600 2000-01-05     1.6                  NA #>  6 08162600 2000-01-06     3.2                  NA #>  7 08162600 2000-01-07    11                    NA #>  8 08162600 2000-01-08    17                    NA #>  9 08162600 2000-01-09    22                    NA #> 10 08162600 2000-01-10    18                    NA #> # … with 7,661 more rows tres_palacios <- tres_palacios |>   mutate(Flow = set_units(Flow, \"m^3/s\")) tres_palacios #> # A tibble: 7,671 × 4 #>    site_no  Date          Flow Indicator_Bacteria #>    <chr>    <date>     [m^3/s]        [cfu/100mL] #>  1 08162600 2000-01-01  0.0238                 NA #>  2 08162600 2000-01-02  0.0850                 NA #>  3 08162600 2000-01-03  0.0963                 NA #>  4 08162600 2000-01-04  0.0736                 NA #>  5 08162600 2000-01-05  0.0453                 NA #>  6 08162600 2000-01-06  0.0906                 NA #>  7 08162600 2000-01-07  0.311                  NA #>  8 08162600 2000-01-08  0.481                  NA #>  9 08162600 2000-01-09  0.623                  NA #> 10 08162600 2000-01-10  0.510                  NA #> # … with 7,661 more rows ## specify the allowable concentration allowable_concentration <- 126 ## set the units units(allowable_concentration) <- \"cfu/100mL\"  ## calculate the exceedance probabilities along with ## allowable pollutant loads and measured pollutant loads ## at given probabilities df_ldc <- calc_ldc(tres_palacios,                     Q = Flow,                     C = Indicator_Bacteria,                     allowable_concentration = allowable_concentration)  df_ldc #> # A tibble: 7,671 × 9 #>    site_no  Date          Flow Indicator_Bacteria Daily_Flow_Volume Daily_Load #>    <chr>    <date>     [m^3/s]        [cfu/100mL]         [100mL/d]    [cfu/d] #>  1 08162600 2000-08-18 0.00623                 NA          5382466.         NA #>  2 08162600 2000-03-07 0.0119                  NA         10275617.         NA #>  3 08162600 2000-03-06 0.0170                  NA         14679453.         NA #>  4 08162600 2000-08-22 0.0212                  NA         18349317.         NA #>  5 08162600 2000-03-08 0.0221                  NA         19083289.         NA #>  6 08162600 2000-08-17 0.0221                  NA         19083289.         NA #>  7 08162600 2000-09-11 0.0227                  NA         19572604.         NA #>  8 08162600 2000-01-01 0.0238                  NA         20551235.         NA #>  9 08162600 2000-08-21 0.0263                  NA         22753153.         NA #> 10 08162600 2000-03-05 0.0283                  NA         24465755.         NA #> # … with 7,661 more rows, and 3 more variables: Allowable_Daily_Load [cfu/d], #> #   P_Exceedance <dbl>, Flow_Category <fct> df_ldc |>   mutate(Daily_Flow_Volume = set_units(Daily_Flow_Volume, \"m^3/day\"),          Allowable_Daily_Load = set_units(Allowable_Daily_Load, \"1E9cfu/day\")) #> # A tibble: 7,671 × 9 #>    site_no  Date          Flow Indicator_Bacteria Daily_Flow_Volume Daily_Load #>    <chr>    <date>     [m^3/s]        [cfu/100mL]           [m^3/d]    [cfu/d] #>  1 08162600 2000-08-18 0.00623                 NA              538.         NA #>  2 08162600 2000-03-07 0.0119                  NA             1028.         NA #>  3 08162600 2000-03-06 0.0170                  NA             1468.         NA #>  4 08162600 2000-08-22 0.0212                  NA             1835.         NA #>  5 08162600 2000-03-08 0.0221                  NA             1908.         NA #>  6 08162600 2000-08-17 0.0221                  NA             1908.         NA #>  7 08162600 2000-09-11 0.0227                  NA             1957.         NA #>  8 08162600 2000-01-01 0.0238                  NA             2055.         NA #>  9 08162600 2000-08-21 0.0263                  NA             2275.         NA #> 10 08162600 2000-03-05 0.0283                  NA             2447.         NA #> # … with 7,661 more rows, and 3 more variables: #> #   Allowable_Daily_Load [1E9cfu/d], P_Exceedance <dbl>, Flow_Category <fct>"},{"path":"https://txwri.github.io/ldc/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Schramm. Author, maintainer. Texas Water Resources Institute. Copyright holder.","code":""},{"path":"https://txwri.github.io/ldc/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schramm M (2022). ldc: Calculate Plot Pollutant Load Duration Curves. https://github.com/TxWRI/ldc, https://txwri.github.io/ldc/.","code":"@Manual{,   title = {ldc: Calculate and Plot Pollutant Load Duration Curves},   author = {Michael Schramm},   year = {2022},   note = {https://github.com/TxWRI/ldc, https://txwri.github.io/ldc/}, }"},{"path":"https://txwri.github.io/ldc/index.html","id":"ldc","dir":"","previous_headings":"","what":"Calculate and Plot Pollutant Load Duration Curves","title":"Calculate and Plot Pollutant Load Duration Curves","text":"ldc provides automated fairly opinionated functions generating pollutant load duration curves (LDCs) freshwater streams. Due automated nature, isn’t much ability adjust methodology customize generated LDCs since much calculation abstracted away user. ldc three major functions: calc_ldc takes input dataset matched flow pollutant concentrations generate table exceedance probabilities grouped user specified break points. summ_ldc uses output calc_ldc generate summary dataframe draw_ldc uses output functions generate LDC figure ggplot object.","code":""},{"path":"https://txwri.github.io/ldc/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Calculate and Plot Pollutant Load Duration Curves","text":"ldc currently Github. First install remotes package install ldc Github:","code":"remotes::install_github(\"TxWRI/ldc\")"},{"path":"https://txwri.github.io/ldc/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Calculate and Plot Pollutant Load Duration Curves","text":"example using data ldc package shown .","code":""},{"path":"https://txwri.github.io/ldc/index.html","id":"setup-and-format-data","dir":"","previous_headings":"Example","what":"Setup and format data","title":"Calculate and Plot Pollutant Load Duration Curves","text":"Calculate exceedance probability Summarize data Plot LDC","code":"library(ldc) library(dplyr) library(units) library(ggplot2)  ## this will calculate a ldc for indicator bacteria  ## ldc uses the unit package to facilitate unit conversions ## we need to make the cfu unit first, since it isn't included  ## in the units package install_unit(\"cfu\")  ## format the data for use in ldc tres_palacios <- as_tibble(tres_palacios) |>   ## flow must have units, here is is in cfs   mutate(Flow = set_units(Flow, \"ft^3/s\"))|>   ## pollutant concentration must have units   mutate(Indicator_Bacteria = set_units(Indicator_Bacteria, \"cfu/100mL\"))  tres_palacios #> # A tibble: 7,671 x 4 #>    site_no  Date           Flow Indicator_Bacteria #>    <chr>    <date>     [ft^3/s]        [cfu/100mL] #>  1 08162600 2000-01-01     0.84                 NA #>  2 08162600 2000-01-02     3                    NA #>  3 08162600 2000-01-03     3.4                  NA #>  4 08162600 2000-01-04     2.6                  NA #>  5 08162600 2000-01-05     1.6                  NA #>  6 08162600 2000-01-06     3.2                  NA #>  7 08162600 2000-01-07    11                    NA #>  8 08162600 2000-01-08    17                    NA #>  9 08162600 2000-01-09    22                    NA #> 10 08162600 2000-01-10    18                    NA #> # ... with 7,661 more rows ## specify the allowable concentration allowable_concentration <- 126 ## set the units units(allowable_concentration) <- \"cfu/100mL\"  ## calculate the exceedance probabilities along with ## allowable pollutant loads and measured pollutant loads ## at given probabilities df_ldc <- calc_ldc(tres_palacios,                     Q = Flow,                     C = Indicator_Bacteria,                     allowable_concentration = allowable_concentration)  df_ldc #> # A tibble: 7,671 x 9 #>    site_no  Date           Flow Indicator_Bacteria Daily_Flow_Volume Daily_Load #>    <chr>    <date>     [ft^3/s]        [cfu/100mL]         [100mL/d]    [cfu/d] #>  1 08162600 2000-08-18     0.22                 NA          5382466.         NA #>  2 08162600 2000-03-07     0.42                 NA         10275617.         NA #>  3 08162600 2000-03-06     0.6                  NA         14679453.         NA #>  4 08162600 2000-08-22     0.75                 NA         18349317.         NA #>  5 08162600 2000-03-08     0.78                 NA         19083289.         NA #>  6 08162600 2000-08-17     0.78                 NA         19083289.         NA #>  7 08162600 2000-09-11     0.8                  NA         19572604.         NA #>  8 08162600 2000-01-01     0.84                 NA         20551235.         NA #>  9 08162600 2000-08-21     0.93                 NA         22753153.         NA #> 10 08162600 2000-03-05     1                    NA         24465755.         NA #> # ... with 7,661 more rows, and 3 more variables: Allowable_Daily_Load [cfu/d], #> #   P_Exceedance <dbl>, Flow_Category <fct> df_sum <- summ_ldc(df_ldc,                     Q = Flow,                     C = Indicator_Bacteria,                     Exceedance = P_Exceedance,                    groups = Flow_Category,                    method = \"geomean\") df_sum #> # A tibble: 3 x 6 #>   Flow_Category Median_Flow Median_P Geomean_C Median_Daily_Fl~ Median_Flow_Load #>   <fct>            [ft^3/s]    <dbl> [cfu/100mL]        [100mL/d]          [cfu/d] #> 1 High Flows          58.9     0.200     259.       1441032996.    373699594298. #> 2 Medium Flows        16.5     0.600      83.6       403684965.     33764600228. #> 3 Low Flows            8.66    0.900      67.1       211995771.     14229395256. draw_ldc(df_ldc,           df_sum,           y_lab = expression(paste(italic(\"E. coli\"))),          label_nudge_y = log10(1000)) +    scale_y_log10() +   annotation_logticks(sides = \"l\") +   theme_bw() +   theme(legend.position = \"bottom\",         legend.title = element_blank(),         legend.direction = \"vertical\",         panel.grid = element_blank())"},{"path":"https://txwri.github.io/ldc/index.html","id":"units","dir":"","previous_headings":"Example","what":"Units","title":"Calculate and Plot Pollutant Load Duration Curves","text":"ldc relies units package facilitate unit conversions tracking units across variables. handy want transform units fly. summary table, median daily flow volume reported units 100mL/day. isn’t logical unit communicate, lets change million. gallons/day. cfu/day really big number. can convert billion cfu/day. want plot , also need convert df_ldc variables matching units. Updated units carry plot:","code":"df_sum |>   mutate(Median_Daily_Flow_Volume = set_units(Median_Daily_Flow_Volume, \"1E6gallons/day\")) -> df_sum df_sum #> # A tibble: 3 x 6 #>   Flow_Category Median_Flow Median_P Geomean_C Median_Daily_Fl~ Median_Flow_Load #>   <fct>            [ft^3/s]    <dbl> [cfu/100mL]   [1E6gallons/d]          [cfu/d] #> 1 High Flows          58.9     0.200     259.             38.1     373699594298. #> 2 Medium Flows        16.5     0.600      83.6            10.7      33764600228. #> 3 Low Flows            8.66    0.900      67.1             5.60     14229395256. df_sum |>   mutate(Median_Flow_Load = set_units(Median_Flow_Load, \"1E9cfu/day\")) -> df_sum df_sum #> # A tibble: 3 x 6 #>   Flow_Category Median_Flow Median_P Geomean_C Median_Daily_Fl~ Median_Flow_Load #>   <fct>            [ft^3/s]    <dbl> [cfu/100mL]   [1E6gallons/d]       [1E9cfu/d] #> 1 High Flows          58.9     0.200     259.             38.1             374.  #> 2 Medium Flows        16.5     0.600      83.6            10.7              33.8 #> 3 Low Flows            8.66    0.900      67.1             5.60             14.2 df_ldc |>   mutate(Daily_Load = set_units(Daily_Load, \"1E9cfu/day\"),          Allowable_Daily_Load = set_units(Allowable_Daily_Load, \"1E9cfu/day\")) -> df_ldc draw_ldc(df_ldc,           df_sum,           y_lab = expression(paste(italic(\"E. coli\"))),          label_nudge_y = log10(1000)) +    scale_y_log10() +   annotation_logticks(sides = \"l\") +   theme_bw() +   theme(legend.position = \"bottom\",         legend.title = element_blank(),         legend.direction = \"vertical\",         panel.grid = element_blank())"},{"path":"https://txwri.github.io/ldc/reference/calc_annual_ldc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate annualized load duration curve — calc_annual_ldc","title":"Calculate annualized load duration curve — calc_annual_ldc","text":"Calculates median annual ldc confidence intervals.","code":""},{"path":"https://txwri.github.io/ldc/reference/calc_annual_ldc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate annualized load duration curve — calc_annual_ldc","text":"","code":"calc_annual_ldc(   .tbl,   Q = NULL,   C = NULL,   Date = NULL,   allowable_concentration = NULL,   breaks = c(1, 0.8, 0.4, 0),   labels = c(\"High Flows\", \"Medium Flows\", \"Low Flows\"),   conf_level = 0.9,   estimator = 6,   n = 500 )"},{"path":"https://txwri.github.io/ldc/reference/calc_annual_ldc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate annualized load duration curve — calc_annual_ldc","text":".tbl data frame least three columns Q (discharge flow), C (associated pollutant concentration), Date. Q variable name .tbl discharge flow. must class `units`, typically units value \"ft^3/s\". C variable name .tbl associated pollutant concentration given flow value. must class `units`, typically units value \"mg/L\" \"cfu/100mL\". Date variable name .tbl event Date. variable must class `Date`. allowable_concentration object class units specifying allowable pollutant concentration. breaks numeric vector break points flow categories. Must length labels + 1. defaults c(1, 0.8, 0.4, 0). labels labels categories specified breaks. conf_level numeric, confidence level (default 0.9) median interval given exceedance probability. estimator one c(5,6,7,8,9,\"hd\"). 6 default method correponding Weibull plotting position. details provided quantile. \"hd\" uses Harrell-Davis Distribution-Free Quantile Estimator (see: hdquantile). n numeric, length generated probability points. Larger n may result slightly smoother curve cost increased processing time. probability points used generate continuous sample quantiles types 5 9 (see quantile).","code":""},{"path":"https://txwri.github.io/ldc/reference/calc_annual_ldc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate annualized load duration curve — calc_annual_ldc","text":"list two tibbles (Q C). Includes variables .tbl   Daily_Flow_Volume (discharge volume), Daily_Load (pollutant sample volume),   P_Exceedance (exeedance probability), Flow_Category (defined breaks   labels).","code":""},{"path":"https://txwri.github.io/ldc/reference/calc_annual_ldc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate annualized load duration curve — calc_annual_ldc","text":"median annual ldc calculated computing flow duration   curve individual year dataset. Exceedance probabilities   calculated descending order Daily Flows. default,   Weibull plotting position used: $$p = P(Q > q_i) =  \\frac{}{n+1}$$   \\(q_i, = 1, 2, ... n\\), -th sorted streamflow value. median streamflow +/- chosen confidence interval calculated   exceedance probability. load duration curve calculated   multiplying median streamflow allowable concentration   appropriate conversions.","code":""},{"path":"https://txwri.github.io/ldc/reference/calc_annual_ldc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate annualized load duration curve — calc_annual_ldc","text":"Vogel, Richard M., Neil M. Fennessey. \"Flow-duration curves.   : New interpretation confidence intervals.\" Journal Water Resources   Planning Management 120, . 4 (1994): 485-504. doi: 10.1061/(ASCE)0733-9496(1994)120:4(485)","code":""},{"path":"https://txwri.github.io/ldc/reference/calc_annual_ldc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate annualized load duration curve — calc_annual_ldc","text":"","code":"# Basic example using built in Tres Palacios data library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union library(units) #> udunits database from /usr/share/xml/udunits/udunits2.xml # Format data install_unit(\"cfu\") df <- as_tibble(tres_palacios) %>%   ## filter data so this run quicker   filter(!is.na(Indicator_Bacteria)) %>%   ## flow must have units, here is is in cfs   mutate(Flow = set_units(Flow, \"ft^3/s\")) %>%   ## pollutant concentration must have units   mutate(Indicator_Bacteria = set_units(Indicator_Bacteria, \"cfu/100mL\")) # Calculate LDC  ## specify the allowable concentration allowable_concentration <- 126 ## set the units units(allowable_concentration) <- \"cfu/100mL\" df_ldc <- calc_annual_ldc(df,                    Q = Flow,                    C = Indicator_Bacteria,                    Date = Date,                    allowable_concentration = allowable_concentration,                    estimator = 5,                    n = 1000) df_ldc$Q #> # A tibble: 1,000 × 11 #>    P_Exceedance median_Q lwr.ci_Q upr.ci_Q median_Daily_Flow_V… lwr.ci_Daily_Fl… #>           <dbl> [ft^3/s] [ft^3/s] [ft^3/s]            [100mL/d]        [100mL/d] #>  1     0.000500     29.3     23.8     66.5           716846635.       582284980. #>  2     0.00150      29.3     23.8     66.5           716846635.       582284980. #>  3     0.00250      29.3     23.8     66.5           716846635.       582284980. #>  4     0.00350      29.3     23.8     66.5           716846635.       582284980. #>  5     0.00450      29.3     23.8     66.5           716846635.       582284980. #>  6     0.00550      29.3     23.8     66.5           716846635.       582284980. #>  7     0.00650      29.3     23.8     66.5           716846635.       582284980. #>  8     0.00750      29.3     23.8     66.5           716846635.       582284980. #>  9     0.00850      29.3     23.8     66.5           716846635.       582284980. #> 10     0.00950      29.3     23.8     66.5           716846635.       582284980. #> # … with 990 more rows, and 5 more variables: #> #   upr.ci_Daily_Flow_Volume [100mL/d], median_Allowable_Daily_Load [cfu/d], #> #   lwr.ci_Allowable_Daily_Load [cfu/d], upr.ci_Allowable_Daily_Load [cfu/d], #> #   Flow_Category <fct>  ## cleanup remove_unit(\"cfu\")"},{"path":"https://txwri.github.io/ldc/reference/calc_ldc.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate load duration curve — calc_ldc","title":"Calculate load duration curve — calc_ldc","text":"Calculates period record load duration curve data frame includes mean daily flow associated point measurements pollutant concentration.","code":""},{"path":"https://txwri.github.io/ldc/reference/calc_ldc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate load duration curve — calc_ldc","text":"","code":"calc_ldc(   .tbl,   Q = NULL,   C = NULL,   allowable_concentration = NULL,   breaks = c(1, 0.8, 0.4, 0),   labels = c(\"High Flows\", \"Medium Flows\", \"Low Flows\"),   estimator = 6 )"},{"path":"https://txwri.github.io/ldc/reference/calc_ldc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate load duration curve — calc_ldc","text":".tbl data frame least two columns Q (discharge flow) C (associated pollutant concentration). Q variable name .tbl discharge flow. must unit set, typically \"ft^3/s\". C variable name .tbl associated pollutant concentration given flow value. must unit set, typically \"mg/L\" \"cfu/100mL\". allowable_concentration object class units specifying allowable pollutant concentration. breaks numeric vector break points flow categories. Must length labels + 1. defaults c(1, 0.8, 0.4, 0). labels labels categories specified breaks. estimator numeric, one c(5,6,7,8,9). 6 default method correponding Weibull plotting position. details provided stats::quantile().","code":""},{"path":"https://txwri.github.io/ldc/reference/calc_ldc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate load duration curve — calc_ldc","text":"object class tibble. Includes variables .tbl   Daily_Flow_Volume (discharge volume), Daily_Load (pollutant sample volume),   P_Exceedance (exeedance probability), Flow_Category (defined breaks   labels).","code":""},{"path":"https://txwri.github.io/ldc/reference/calc_ldc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate load duration curve — calc_ldc","text":"exceedance probability calculated descending order   Daily Flows. default, Weibull plotting position used:   $$p = P(Q > q_i) =  \\frac{}{n+1}$$   \\(q_i, = 1, 2, ... n\\), -th sorted streamflow value.","code":""},{"path":"https://txwri.github.io/ldc/reference/calc_ldc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate load duration curve — calc_ldc","text":"","code":"# Basic example using built in Tres Palacios data library(dplyr) library(units) # Format data install_unit(\"cfu\") df <- as_tibble(tres_palacios) %>%   ## filter data so this run quicker   filter(!is.na(Indicator_Bacteria)) %>%   ## flow must have units, here is is in cfs   mutate(Flow = set_units(Flow, \"ft^3/s\")) %>%   ## pollutant concentration must have units   mutate(Indicator_Bacteria = set_units(Indicator_Bacteria, \"cfu/100mL\")) # Calculate LDC  ## specify the allowable concentration allowable_concentration <- 126 ## set the units units(allowable_concentration) <- \"cfu/100mL\" df_ldc <- calc_ldc(df,                    Q = Flow,                    C = Indicator_Bacteria,                    allowable_concentration = allowable_concentration) df_ldc #> # A tibble: 72 × 9 #>    site_no  Date           Flow Indicator_Bacteria Daily_Flow_Volume  Daily_Load #>    <chr>    <date>     [ft^3/s]        [cfu/100mL]         [100mL/d]     [cfu/d] #>  1 08162600 2011-09-28     4.99                770        122084120.     9.40e10 #>  2 08162600 2009-09-09     5.52                 92        135050970.     1.24e10 #>  3 08162600 2003-06-24     7.12                 10        174196179.     1.74e 9 #>  4 08162600 2009-06-11     7.7                 160        188386317.     3.01e10 #>  5 08162600 2010-12-16     8.99                 93        219947142.     2.05e10 #>  6 08162600 2008-12-16     9.06                 74        221659744.     1.64e10 #>  7 08162600 2012-01-04     9.15                220        223861662.     4.92e10 #>  8 08162600 2002-06-12     9.2                  74        225084950.     1.67e10 #>  9 08162600 2016-02-10     9.46                 32        231446047.     7.41e 9 #> 10 08162600 2016-04-06     9.46                 31        231446047.     7.17e 9 #> # … with 62 more rows, and 3 more variables: Allowable_Daily_Load [cfu/d], #> #   P_Exceedance <dbl>, Flow_Category <fct>  ## cleanup remove_unit(\"cfu\")"},{"path":"https://txwri.github.io/ldc/reference/draw_ldc.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a load duration curve — draw_ldc","title":"Draw a load duration curve — draw_ldc","text":"Creates load duration curve visualization outputs calc_ldc summ_ldc ggplot object.","code":""},{"path":"https://txwri.github.io/ldc/reference/draw_ldc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a load duration curve — draw_ldc","text":"","code":"draw_ldc(   .tbl_calc,   .tbl_summ,   y_lab = NULL,   ldc_legend_name = \"Allowable Load at State Water Quality Standard\",   measurement_name = \"Measurement Value\",   measurement_shape = 21,   measurement_color = \"dodgerblue\",   measurement_alpha = 1,   summary_name = \"Summarized Measured Load\",   summary_stat_shape = 12,   summary_stat_color = \"red\",   label_nudge_y = 0,   label_font_family = \"Arial\",   label_font_size = 3,   label_break = TRUE )"},{"path":"https://txwri.github.io/ldc/reference/draw_ldc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a load duration curve — draw_ldc","text":".tbl_calc data frame object created calc_ldc .tbl_summ data frame object created summ_ldc y_lab optional string y-axis label name, appended units automatically. default NULL. ldc_legend_name string, provides name used allowable pollutant load line legend. required. measurement_name string, provides name used measured load values legend. required. measurement_shape aesthetic value passed layer plotting measured load values. defaults 21. measurement_color aesthetic value passed layer plotting measured load values. defaults \"dodgerblue\". measurement_alpha aesthetic value passed layer plotting measured load values. defaults 1. summary_name string, provides name used summary statistic values legend. required. summary_stat_shape aesthetic value passed layer plotting summary statistic values. defaults 12. summary_stat_color aesthetic value passed layer plotting summary statistic values. defaults \"red\". label_nudge_y numeric value vertically nudge flow category labels. log10 transformed scale used, log value probably appropriate example log10(1000). label_font_family string specifying font family use flow category labels. label_font_size numeric value specifying font size use flow category labels. label_break logical, add line breaks flow category labels. Labels break spaces.","code":""},{"path":"https://txwri.github.io/ldc/reference/draw_ldc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a load duration curve — draw_ldc","text":"ggplot object","code":""},{"path":"https://txwri.github.io/ldc/reference/draw_ldc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a load duration curve — draw_ldc","text":"","code":"# Basic example using built in Tres Palacios data library(dplyr) library(units) library(ggplot2) # Format data install_unit(\"cfu\") df <- as_tibble(tres_palacios) %>%         ## filter data so this run quicker         filter(!is.na(Indicator_Bacteria)) %>%         ## flow must have units, here is is in cfs         mutate(Flow = set_units(Flow, \"ft^3/s\")) %>%         ## pollutant concentration must have units         mutate(Indicator_Bacteria = set_units(Indicator_Bacteria, \"cfu/100mL\")) # Calculate LDC  ## specify the allowable concentration allowable_concentration <- 126 ## set the units units(allowable_concentration) <- \"cfu/100mL\" df_ldc <- calc_ldc(df,                    Q = Flow,                    C = Indicator_Bacteria,                    allowable_concentration = allowable_concentration)  # Summarize LDC df_sum <- summ_ldc(df_ldc,                    Q = Flow,                    C = Indicator_Bacteria,                    Exceedance = P_Exceedance,                    groups = Flow_Category,                    method = \"geomean\")  # Create ggplot object draw_ldc(df_ldc,          df_sum,          y_lab = expression(paste(italic(\"E. coli\"))),          label_nudge_y = log10(1000)) +          scale_y_log10() +          theme(legend.title = element_blank(),                legend.direction = \"vertical\",                legend.position = \"bottom\")   ## cleanup remove_unit(\"cfu\")"},{"path":"https://txwri.github.io/ldc/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://txwri.github.io/ldc/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://txwri.github.io/ldc/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://txwri.github.io/ldc/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"https://txwri.github.io/ldc/reference/summ_ldc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize load duration curve — summ_ldc","title":"Summarize load duration curve — summ_ldc","text":"Calculates summary statistics flow pollutant concentrations desired flow categories. Estimates \"average\" pollutant load per category based average concentration times median flow.","code":""},{"path":"https://txwri.github.io/ldc/reference/summ_ldc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize load duration curve — summ_ldc","text":"","code":"summ_ldc(.tbl, Q, C, Exceedance, groups, method = \"geomean\")"},{"path":"https://txwri.github.io/ldc/reference/summ_ldc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize load duration curve — summ_ldc","text":".tbl data frame, prefferably output calc_ldc(). Q variable name .tbl discharge flow. must unit set, typically \"ft^3/s\". C variable name .tbl associated pollutant concentration given flow value. must unit set, typically \"mg/L\" \"cfu/100mL\". Exceedance variable name .tbl flow/load exceedance probabilities. groups variable name .tbl categorized flow names. method string describes summary statistic used pollutant concentration. Must one c('geomean', 'mean', 'median').","code":""},{"path":"https://txwri.github.io/ldc/reference/summ_ldc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize load duration curve — summ_ldc","text":"object class tibble. Includes Flow Category grouping variable,   median flow exceedance values, geometric mean/mean/median pollutant   concentration, estimated average load based median flow times   average pollutant concentration per flow category.","code":""},{"path":"https://txwri.github.io/ldc/reference/summ_ldc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize load duration curve — summ_ldc","text":"","code":"# Basic example using built in Tres Palacios data library(dplyr) library(units) # Format data install_unit(\"cfu\") df <- as_tibble(tres_palacios) %>%         ## filter data so this run quicker         filter(!is.na(Indicator_Bacteria)) %>%         ## flow must have units, here is is in cfs         mutate(Flow = set_units(Flow, \"ft^3/s\")) %>%         ## pollutant concentration must have units         mutate(Indicator_Bacteria = set_units(Indicator_Bacteria, \"cfu/100mL\")) # Calculate LDC  ## specify the allowable concentration allowable_concentration <- 126 ## set the units units(allowable_concentration) <- \"cfu/100mL\" df_ldc <- calc_ldc(df,                    Q = Flow,                    C = Indicator_Bacteria,                    allowable_concentration = allowable_concentration)  # Summarize LDC df_sum <- summ_ldc(df_ldc,                    Q = Flow,                    C = Indicator_Bacteria,                    Exceedance = P_Exceedance,                    groups = Flow_Category,                    method = \"geomean\") df_sum #> # A tibble: 3 × 6 #>   Flow_Category Median_Flow Median_P Geomean_C Median_Daily_Fl… Median_Flow_Load #>   <fct>            [ft^3/s]    <dbl> [cfu/100…        [100mL/d]          [cfu/d] #> 1 High Flows          31.9     0.205     201.        780457599.    156839317356. #> 2 Medium Flows        14.5     0.603      81.0       354753454.     28727125809. #> 3 Low Flows            9.18    0.897      77.5       224473306.     17399766767.  ## cleanup remove_unit(\"cfu\")"},{"path":"https://txwri.github.io/ldc/reference/tres_palacios.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean daily flow and point E. coli bacteria measurements. — tres_palacios","title":"Mean daily flow and point E. coli bacteria measurements. — tres_palacios","text":"dataset containing mean daily flow E. coli bacteria concentrations Tres Palacios River 2000 2020.","code":""},{"path":"https://txwri.github.io/ldc/reference/tres_palacios.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean daily flow and point E. coli bacteria measurements. — tres_palacios","text":"","code":"tres_palacios"},{"path":"https://txwri.github.io/ldc/reference/tres_palacios.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Mean daily flow and point E. coli bacteria measurements. — tres_palacios","text":"data frame 7671 rows 4 variables: site_no USGS gage number Date Observation Date Flow Mean Daily Flow cfs Indicator_Bacteria Bacteria concentration measured given day MPN/100mL","code":""},{"path":"https://txwri.github.io/ldc/reference/tres_palacios.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Mean daily flow and point E. coli bacteria measurements. — tres_palacios","text":"USGS NWIS https://waterdata.usgs.gov/nwis TCEQ SWQM https://www.tceq.texas.gov/waterquality/monitoring","code":""}]
